# run this file from within Cygwin (or on a 'real' Unix) using the
# prove command line tool.  "prove" is a script, and is part of
# the Test::Harness perl module.

# I (Gordon) have added an alias to Cygwin to ease running this test
# alias pd='export POT_TEST_DIR=potoss_dev ; prove /cygdrive/i/potoss_alias/potoss_code/selenium.selt'

# you will also need to install the Selenium Remote Control application
# and put its directory in the $SELENIUM_SERVER_DIR configuration variable
# below.

use strict;
use warnings;

# Don't set the number of tests in the Test::More definition
# rather, set them based on the number of browsers you'll be testing.
# This is done automatically with the "plan" function call below.
use Test::More;
use Test::WWW::Selenium;
#use Time::HiRes qw( usleep ); #a more high resolution sleep timer

my $NUM_TESTS_PER_BROWSER = 190;
my $SELENIUM_SERVER_DIR =
    qq~"C:\\Program Files\\selenium-remote-control-0.9.1_nightly\\server"~;

my @BROWSERS = (
    { name => 'firefox',  should_test => 1 },
    { name => 'iexplore', should_test => 1 },
    { name => 'opera', should_test => 0 }, # works, but gives a little popup error.
    #gemhack 2 would like to add safari
);

my @browsers_to_test = grep({$_->{should_test}} @BROWSERS);

# automatically set the number of Test::More tests based on the
# number of browsers you plan to test.
plan( tests => $NUM_TESTS_PER_BROWSER * scalar(@browsers_to_test) );

# start up the Selenium server in java
# send STDERR to /dev/null so no 'clutter' messages appear in the console
system qq~
    cd $SELENIUM_SERVER_DIR ;
    java -jar selenium-server.jar > ./potoss_lastrun_stdout.log 2> ./potoss_lastrun_stderr.log &
~;

#give the selenium server a chance to start up...
sleep 4;

my $sel = undef;

my $test_dir = $ENV{POT_TEST_DIR}
    || die "needs POT_TEST_DIR environmental variable set";

my %test_for = (
    potoss_dev => {
        url   => 'www.potoss_dev.com', # you can set this in your HOSTS file
        dir   => '/?',
        texts => '/cygdrive/i/potoss_dev_alias/potoss_data/texts_8s73f9dv/',
    },
    potoss_dev_http_simple => {
        url   => 'www.potoss_dev.com:4782', # you can set this in your HOSTS file
        dir   => '/?',
        texts => '/cygdrive/i/potoss_dev_alias/potoss_data/texts_8s73f9dv/',
    },
    #TEMPLATE_ADD_EXTRA_SELENIUM_TEST_DIRS
);

my $url = $test_for{$test_dir}->{url} || die "need url for test_dir";
my $dir = $test_for{$test_dir}->{dir}  || die "need dir for test_dir";
my $texts_dir = $test_for{$test_dir}->{texts} || die "need texts for test_dir";

die "texts_dir $texts_dir does not exist" unless -d $texts_dir;

BROWSER:
for my $browser (@browsers_to_test) {

    $sel = Test::WWW::Selenium->new(
        host        => "localhost",
        port        => 4444,
        browser     => "*$browser->{name}",
        browser_url => "http://$url/",
    );

    #-------------------------------------------------------------------------
    # Story:
    # This is POT page which has been embedded in an iframe and has nm_no_opts
    # specified to hide the options.  Make sure that the options stay hidden
    # as you click around.

    $sel->open_ok("/?PH_show_page&nm_page=potoss_test_link_tree_a_base&nm_no_opts=1");
    $sel->is_text_present_ok("potoss_test_existing_but_not_linkable_to_page");
    ok(! $sel->is_text_present("advanced options"), "advanced options not showing");

    $sel->click_ok("link=potoss_test_link_tree_a_branch_a");
    my_loads_ok();
    ok(! $sel->is_text_present("advanced options"), "advanced options not showing - 1");

    $sel->click_ok("myel_edit_link");
    my_loads_ok();
    ok(! $sel->is_text_present("advanced options"), "advanced options not showing - 2");

    $sel->click_ok("//input[\@value='cancel']");
    my_loads_ok();
    ok(! $sel->is_text_present("advanced options"), "advanced options not showing - 3");

    #-------------------------------------------------------------------------
    # Story:
    # A user looks at changes in an already existing page

    $sel->open_ok("${dir}potoss_saved_test");
    my_loads_ok();
    $sel->is_text_present_ok("edit this page");
    $sel->is_text_present_ok("this is change 11");


    $sel->click_ok("link=advanced options");
    my_loads_ok();
    $sel->click_ok("link=show the page's revision history");
    my_loads_ok();
    $sel->click_ok("link=compare two revisions");
    my_loads_ok();
    $sel->click_ok("link=start at revision 9");
    my_loads_ok();
    $sel->click_ok("link=end at revision 10");
    my_loads_ok();
    $sel->is_text_present_ok("this is change 10");


    #-------------------------------------------------------------------------
    # Story:
    # A user looks at changes in an already existing page

    $sel->open_ok("${dir}potoss_wow"); #read only alias for potoss_saved_test
    my_loads_ok();
    $sel->is_text_present_ok("read only");
    $sel->is_text_present_ok("this is change 11");

    $sel->open_ok("${dir}PH_edit&nm_page=potoss_wow");
    my_loads_ok();
    $sel->is_text_present_ok("You can't edit this page");

    $sel->open_ok("${dir}PH_page_opts&nm_page=potoss_wow");
    my_loads_ok();
    $sel->is_text_present_ok("You can't view this page's options");

    #-------------------------------------------------------------------------
    # Story:
    # A user looks for a page which doesn't exist, decides to create it and
    # makes a couple of revisions

    $sel->open_ok("${dir}potoss_tmp_test");
    my_loads_ok();
    $sel->is_text_present_ok("This page doesn't exist");
    $sel->click_ok("link=create it as a new page");
    my_loads_ok();
    $sel->is_text_present_ok("edit this page");
    $sel->click_ok("link=edit this page");
    my_loads_ok();
    $sel->is_text_present_ok("This message only appears the first time you edit a page");
    $sel->type_ok("nm_text", "This is some text.");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("This is some text");
    $sel->click_ok("link=edit this page");
    my_loads_ok();
    $sel->type_ok("nm_text", "This is some text.\nThis is even more text.");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("This is even more text");
    $sel->click_ok("link=advanced options");
    my_loads_ok();
    $sel->click_ok("link=show the page's revision history");
    my_loads_ok();
    $sel->is_text_present_ok("view revision 2");

    `cd $texts_dir ; rm -r potoss_tmp_test_REVS ; rm potoss_tmp_test*`;

    #-------------------------------------------------------------------------
    # Story:
    # When there is only a single revision, a message appears when you try
    # to look at the revisions.

    $sel->open_ok("${dir}potoss_tmp_test");
    my_loads_ok();
    $sel->is_text_present_ok("This page doesn't exist");
    $sel->click_ok("link=create it as a new page");
    my_loads_ok();
    $sel->is_text_present_ok("edit this page");
    $sel->click_ok("link=edit this page");
    my_loads_ok();
    $sel->is_text_present_ok("This message only appears the first time you edit a page");
    $sel->type_ok("myel_text_area", "This is some text.");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->click_ok("link=advanced options");
    my_loads_ok();
    $sel->click_ok("link=show the page's revision history");
    my_loads_ok();
    $sel->is_text_present_ok("There is currently only one revision");

    `cd $texts_dir ; rm -r potoss_tmp_test_REVS ; rm potoss_tmp_test*`;

    #-------------------------------------------------------------------------
    # Story:
    # Try to create a page name which is in the dictionary
    $sel->open_ok("${dir}PH_create");
    $sel->is_text_present_ok("like the page name");
    $sel->type_ok("nm_page", "queen");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("is in the dictionary");

    #-------------------------------------------------------------------------
    # Story:
    # Try to create a page which already exists
    $sel->open_ok("${dir}PH_create");
    $sel->is_text_present_ok("like the page name");
    $sel->type_ok("nm_page", "potoss_saved_test");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("that one already exists");

    #-------------------------------------------------------------------------
    # Story:
    # Try to create a wrong page name.  It will automatically suggest a
    # better one.
    $sel->open_ok("${dir}PH_create");
    $sel->is_text_present_ok("like the page name");
    $sel->type_ok("nm_page", "My dog is always hungry!");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("changed the page name to");
    $sel->is_text_present_ok("my_dog_is_always_hungry");

    #-------------------------------------------------------------------------
    # Story:
    # A user wants to encrypt and decrypt their page content.

    $sel->open_ok("${dir}potoss_test_encryption_a");
    $sel->is_text_present_ok("Here is some unencrypted content.");
    $sel->is_text_present_ok("Less than < and greater than > and ampersand & and question mark ?");
    $sel->click_ok("link=advanced options");
    my_loads_ok();
    $sel->click_ok("link=very advanced");
    my_loads_ok();
    $sel->click_ok("link=show the encryption buttons");
    my_loads_ok();
    $sel->click_ok("link=go back to the page");
    my_loads_ok();
    $sel->is_text_present_ok("Here is some unencrypted content.");
    $sel->click_ok("myel_edit_link");
    my_loads_ok();
    ok($sel->get_value("myel_text_area") =~ /^Here is some unencrypted content/);
    ok($sel->get_value("myel_text_area") =~ /Less than < and greater than > and ampersand & and question mark \?/);
    $sel->type_ok("myel_blowfish_key", "asimplekey");
    $sel->click_ok("link=encrypt");
    ok($sel->get_value("myel_text_area") =~ /^4BE6B52958CAF3FA48780A3D72959F9DC87/);
    $sel->click_ok("link=decrypt");
    ok($sel->get_value("myel_text_area") =~ /^Here is some unencrypted content/);
    ok($sel->get_value("myel_text_area") =~ /Less than < and greater than > and ampersand & and question mark \?/);
    #go back to the main page
    $sel->click_ok("//input[\@value='cancel']");
    my_wait_until_text_present_ok("advanced options", 1);
    $sel->click_ok("link=advanced options");
    my_loads_ok();
    $sel->click_ok("link=very advanced");
    my_loads_ok();
    $sel->click_ok("link=hide the encryption buttons");
    my_loads_ok();

    #-------------------------------------------------------------------------
    # Story:
    # A user decides to edit starting at a non-HEAD revision.
    # There should be alerts about this, but they should be able to get to
    # the right place to edit, and if they cancel their edit, it should take
    # them back to the page on the right revision.

    $sel->open_ok("/?PH_edit&nm_page=potoss_saved_test&nm_rev=9");
    $sel->is_text_present_ok("You are not editing the latest revision");
    $sel->click_ok("link=Edit the latest revision");
    my_loads_ok();
    $sel->click_ok("//input[\@value='cancel']");
    my_loads_ok();
    $sel->is_text_present_ok("edit this page");

    $sel->click_ok("myel_edit_link");
    my_loads_ok();
    $sel->click_ok("//input[\@value='cancel']");
    my_loads_ok();
    $sel->is_text_present_ok("edit this page");

    $sel->open_ok("/?PH_edit&nm_page=potoss_saved_test&nm_rev=9");
    $sel->click_ok("//input[\@value='cancel']");
    my_loads_ok();
    $sel->is_text_present_ok("You are looking at revision 9");


    #-------------------------------------------------------------------------
    # Story:
    # A user is on a page, clicks the "create a new page" link, then makes a
    # linked page.  The link to [potoss_tmp_link_page_2] **DOES NOT** already
    # exist on the first page, so it's automatically created.  See similar
    # story below...

    $sel->open_ok("${dir}potoss_tmp_link_page_1");
    my_loads_ok();
    $sel->is_text_present_ok("This page doesn't exist");
    $sel->click_ok("link=create it as a new page");
    my_loads_ok();
    $sel->is_text_present_ok("create a new page");
    $sel->click_ok("link=create a new page");
    my_loads_ok();
    $sel->is_text_present_ok("A related page");
    $sel->click_ok("link=A related page");
    my_loads_ok();
    $sel->type_ok("nm_page", "potoss_tmp_link_page_2");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("back to potoss_tmp_link_page_1");
    $sel->click_ok("link=potoss_tmp_link_page_1");
    my_loads_ok();
    $sel->is_text_present_ok("link to potoss_tmp_link_page_2");
    $sel->click_ok("link=potoss_tmp_link_page_2");
    my_loads_ok();

    `cd $texts_dir ; rm -r potoss_tmp_link_page_1_REVS ; rm -r potoss_tmp_link_page_2_REVS ; rm potoss_tmp_link_page_*`;

    #-------------------------------------------------------------------------
    # Story:
    # A user is on a page, clicks the "create a new page" link, then makes a
    # linked page.  The link to [potoss_tmp_link_page_2] **DOES** already
    # exist on the first page, so a new one is not automatically created.
    # See similar story above...

    $sel->open_ok("${dir}potoss_tmp_link_page_1");
    my_loads_ok();
    $sel->is_text_present_ok("This page doesn't exist");
    $sel->click_ok("link=create it as a new page");
    my_loads_ok();

    # unlike the story above, add the link to the text.
    {
        $sel->is_text_present_ok("edit this page");
        $sel->click_ok("link=edit this page");
        my_loads_ok();
        $sel->is_text_present_ok("This message only appears the first time you edit a page");
        $sel->type_ok("myel_text_area", "[potoss_tmp_link_page_2]");
        $sel->click_ok("nm_submit");
        my_loads_ok();
    }

    $sel->is_text_present_ok("create a new page");
    $sel->click_ok("link=create a new page");
    my_loads_ok();
    $sel->is_text_present_ok("A related page");
    $sel->click_ok("link=A related page");
    my_loads_ok();
    $sel->type_ok("nm_page", "potoss_tmp_link_page_2");
    $sel->click_ok("nm_submit");
    my_loads_ok();
    $sel->is_text_present_ok("back to potoss_tmp_link_page_1");
    $sel->click_ok("link=potoss_tmp_link_page_1");
    my_loads_ok();

    # unlike the story above
    {
        ok( ! $sel->is_text_present("link to potoss_tmp_link_page_2"),
            "the automatically created text was not added because the link already existed");
    }

    $sel->is_text_present("potoss_tmp_link_page_2");
    $sel->click_ok("link=potoss_tmp_link_page_2");
    my_loads_ok();

    `cd $texts_dir ; rm -r potoss_tmp_link_page_1_REVS ; rm -r potoss_tmp_link_page_2_REVS ; rm potoss_tmp_link_page_*`;
    

    #-------------------------------------------------------------------------
    # Story:
    # [tag:todo] - How do we test keyboard shortcuts?    

    sleep 2; #see what happened in the browser window before you close it.
    $sel->stop();

}

# If there is still an sel object, then send the Remote Control the command
# to shutDown, which will cause the Java process to end.  This is not
# documented directly in the Test::WWW::Selenium documentation, but the
# shutDown command is shown in the Selenium Remote Control documentation.
$sel && $sel->do_command("shutDown");

sub my_loads_ok {
    # this is called so often that it should be a subroutine
    # with a cleaner name and a variable you can change in one place.
    $sel->wait_for_page_to_load_ok('30000', 'page loads in less than 30000');
}

sub my_wait_until_text_present_ok {
    my $text = shift;
    my $num_seconds = shift
        || die "need the number of seconds to wait";
    my $message = shift;
    
    for my $try_num (0..$num_seconds) {

        if ($sel->is_text_present($text)) {
            ok(1, $message);
            return 1;
        }

        if ($try_num > $num_seconds) {
            ok(0, $message);
            return 0;
        }

        sleep(1);
    }
}