# Run this file from within Cygwin (or on a 'real' Unix) using the
# prove command line tool.  "prove" is a script, and is part of
# the Test::Harness perl module.

# You can use an alias to ease running this test
# alias pd='export POT_TEST_SERVER=http_simple ; prove ./potoss_code/selenium/tests.sel'

# Here's a good command line for testing if you're running the Selenium server
# yourself and don't want this script to startup or shutdown the Selenium
# server.
# export POT_TEST_SERVER=http_simple ; export POT_SELENIUM_SERVER_STARTED_EXTERNALLY=1; export POT_SELENIUM_SERVER_SHUTDOWN_EXTERNALLY=1; export POT_BE_VERBOSE=1; prove ./potoss_code/selenium/tests.sel

# Here's another one where you skip most of the tests, but run different tests
# each time.  It's basically like running a small, random assortment of tests
# (like you might do as a sanity check while developing)
# export POT_TEST_SERVER=http_simple ; export POT_SKIP_NUM_TESTS_IN_TEN=7; prove ./potoss_code/selenium/tests.sel

# You could combine the two into something really fast.  It won't start up the
# Selenium server, and it will only run a really small number of tests (If you
# need to force a particular test to be included, look for the
# "force_include_when_skipping" option within the test):
# export POT_TEST_SERVER=http_simple ; export POT_SKIP_NUM_TESTS_IN_TEN=7; export POT_SELENIUM_SERVER_STARTED_EXTERNALLY=1; export POT_SELENIUM_SERVER_SHUTDOWN_EXTERNALLY=1; export POT_BE_VERBOSE=1; prove ./potoss_code/selenium/tests.sel

use strict;
use warnings;

use Test::More;
use Test::WWW::Selenium;

#--- Start configuration

my $SELENIUM_SERVER_DIR = "./potoss_code/selenium";
my $POTOSS_DIR = ".";

my @BROWSERS = (
    { name => 'firefox',  should_test => 1 },
    { name => 'iexplore', should_test => 0 },
    { name => 'opera', should_test => 0 }, # works, but gives a little popup error.
    #gemhack 2 would like to add safari
);


sub get_env {
    my $env_key = shift;

    my @allowed_keys = qw(
        POT_TEST_SERVER
        POT_BE_VERBOSE

        POT_SELENIUM_HOST
        POT_SELENIUM_PORT

        POT_SELENIUM_SERVER_STARTED_EXTERNALLY
        POT_SELENIUM_SERVER_SHUTDOWN_EXTERNALLY

        POT_RANDOMIZE
        POT_SKIP_NUM_TESTS_IN_TEN
    );

    die "$env_key is not an ENV variable we use" if ! grep({$_ eq $env_key} @allowed_keys);

    return $ENV{$env_key};
}

#--- End configuration

sub fisher_yates_shuffle {
    my $array = shift;
    my $i;
    for ($i = @$array; --$i; ) {
        my $j = int rand ($i+1);
        next if $i == $j;
        @$array[$i,$j] = @$array[$j,$i];
    }
}

my @all_tests = get_tests();

#check that the options are correctly specified for each test
for my $test_ref (@all_tests) {
    die "test is lacking name" if ! exists $test_ref->{name};
    my $test_name = $test_ref->{name};
    die "$test_name lacking should_run option" if ! exists $test_ref->{should_run};
    die "$test_name lacking solo option" if ! exists $test_ref->{solo};
    die "$test_name lacking numtests option" if ! exists $test_ref->{numtests};
}

my @solo_tests = grep({$_->{solo} == 1} @all_tests);
my @last_tests = grep({$_->{is_last_test} == 1} @all_tests);
if (scalar(@last_tests) > 1) {
    die "only one test can be the last test... check your is_last_test options";
}

my @tests_to_run = (@solo_tests)
    ? @solo_tests
    : grep({$_->{should_run} == 1} @all_tests);

if (get_env("POT_RANDOMIZE")) {
    fisher_yates_shuffle(\@all_tests);
}

if (get_env("POT_SKIP_NUM_TESTS_IN_TEN")) {
    @tests_to_run = ();

    #Needs to be random for the skipping to skip different tests each time
    fisher_yates_shuffle(\@all_tests);

    my $counter = 1;
    for my $test (@all_tests) {
        if ( $test->{should_run} != 1 ) {
            next;
        }
        if ( $test->{force_include_when_skipping} ) {
            push(@tests_to_run, $test);
            $counter++;
            next;
        }
        if ($counter > get_env("POT_SKIP_NUM_TESTS_IN_TEN")){
            push(@tests_to_run, $test);
        }
        $counter++;
        if ($counter > 10) {
            $counter = 1;
        }
    }
}

my @truncated_tests_to_run = ();

# If one of the tests is set to be the last test to run, then truncate the
# list of tests.
if (scalar(@last_tests) > 0) {
    TEST:
    for my $test (@tests_to_run) {
        push @truncated_tests_to_run, $test;
        if ( $test->{is_last_test} ) {
            last TEST;
        }
    }
}
else {
    @truncated_tests_to_run = @tests_to_run;
}

my $NUM_TESTS_PER_BROWSER = 0;
for my $test_ref (@truncated_tests_to_run) {
    $NUM_TESTS_PER_BROWSER += $test_ref->{numtests};
}

die "didn't parse this file for tests correctly" if $NUM_TESTS_PER_BROWSER == 0;

my @browsers_to_test = grep({$_->{should_test}} @BROWSERS);

# automatically set the number of Test::More tests based on the
# number of browsers you plan to test.
plan( tests => $NUM_TESTS_PER_BROWSER * scalar(@browsers_to_test) );

# start up the Selenium server in java
# send both STDOUT and STDERR to files so no 'clutter' messages appear
# in the console, but you're able to see what happened, if necessary.
if (! get_env("POT_SELENIUM_SERVER_STARTED_EXTERNALLY") ) {
    # [tag:hack:gem] eventually we shouldn't need this... it's just because
    # Firefox 3.5 on Ubuntu is acting a bit funny at the moment If you have a
    # selenium-firefox folder, it will use the firefox inside the folder
    # instead of the normal default firefox.
    system qq~
        cd "$SELENIUM_SERVER_DIR" ;
        java -DfirefoxDefaultPath="/usr/lib/firefox-3.0.14/firefox" -jar selenium-server.jar > ./potoss_lastrun_stdout.log 2> ./potoss_lastrun_stderr.log &
    ~;
}

#give the selenium server a chance to start up...
sleep 4;

my $sel = undef;

my $test_dir = get_env("POT_TEST_SERVER")
    || die "needs POT_TEST_SERVER environmental variable set";


if ($test_dir eq "http_simple") {
    my $child_pid = undef;

    unless ( $child_pid = fork() ) {
        exec("cd potoss_code; perl run_test_web_server.pl");
        exit 0;
    }
}


my %test_for = (
    potoss_dev => {
        url   => 'localhost',
        dir   => '/?',
        texts => "$POTOSS_DIR/potoss_data/texts_8s73f9dv/",
    },
    http_simple => {
        url   => 'localhost:4782',
        dir   => '/?',
        texts => "$POTOSS_DIR/potoss_data/texts_8s73f9dv/",
    },
    #TEMPLATE_ADD_EXTRA_SELENIUM_TEST_DIRS
);

my $url = $test_for{$test_dir}->{url} || die "need url for test_dir";
my $dir = $test_for{$test_dir}->{dir}  || die "need dir for test_dir";
my $texts_dir = $test_for{$test_dir}->{texts} || die "need texts for test_dir";

die "texts_dir $texts_dir does not exist" unless -d $texts_dir;

if ( scalar(@truncated_tests_to_run) != scalar(@all_tests) ) {
    warn "Just a note: Not running all the tests.  Either some have been solo'd, some have should_run set to zero, or is_last_test is set on one."
}

sub do_data_cleanup {
    # First, remove any untracked files
    `git clean -d -f -q potoss_data`;
    # Then, revert the changes to tracked files
    `git checkout potoss_data`;
}

BROWSER:
for my $browser (@browsers_to_test) {

    start_selenium_browser($browser);

    do_data_cleanup();

    for my $test_ref (@truncated_tests_to_run) {
        # Only clean up at the beginning for the first test run.
        # After that, clean up at the end of each test.
        diag("starting test: $test_ref->{name}");
        $test_ref->{code}->();
        diag("ending test: $test_ref->{name}");
        do_data_cleanup();
    }

    if (get_env("POT_TEST_SERVER") eq "http_simple") {
        #kill the server by sending it a special command
        $sel->open( $dir . "kill_server");
    }

    stop_selenium_browser();
}

sub start_selenium_browser {
    my $browser = shift;

    my $should_be_verbose = ( get_env("POT_BE_VERBOSE") ) ? 1 : 0;
    my $host = get_env("POT_SELENIUM_HOST") || "localhost";
    my $port = get_env("POT_SELENIUM_PORT") || 4444;

    $sel = Test::WWW::Selenium->new(
        host        => $host,
        port        => $port,
        browser     => "*$browser->{name}",
        browser_url => "http://$url/",
        verbose => $should_be_verbose,
    );
}

sub stop_selenium_browser {
    $sel && $sel->stop();
    return 1;
}

# If there is still an sel object, then send the Remote Control the command
# to shutDown, which will cause the Java process to end.  This is not
# documented directly in the Test::WWW::Selenium documentation, but the
# shutDown command is shown in the Selenium Remote Control documentation.
#
# gemhack 4 - it doesn't appear to work on this Linux setup, so commenting
# out for now.
if (! get_env("POT_SELENIUM_SERVER_SHUTDOWN_EXTERNALLY") ) {
    $sel && $sel->do_command("shutDownSeleniumServer");
}


sub get_tests {
    return (
{
    name => "tst_add_and_remove_a_readonly_alias",
    numtests => 29, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user wants to add a second readonly alias to a page that already
        # has one.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_saved_test");
        $sel->is_text_present_ok("this is change 1");

        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=very advanced");
        my_loads_ok();
        $sel->value_is("nm_read_only_aliases", "potoss_wow");


        # Add another alias
        $sel->type_ok("nm_read_only_aliases", "potoss_wow, potoss_new_alias");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("The read-only aliases were set.");
        $sel->value_is("nm_read_only_aliases", "potoss_wow, potoss_new_alias");

        # Check that the new alias page works
        $sel->open_ok("${dir}potoss_new_alias");
        $sel->is_text_present_ok("this page is read only");
        $sel->is_text_present_ok("this is change 1");

        # Now go back to the original page and remove the alias you just created
        $sel->open_ok("${dir}potoss_saved_test");
        $sel->is_text_present_ok("this is change 1");
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=very advanced");
        my_loads_ok();
        $sel->value_is("nm_read_only_aliases", "potoss_wow, potoss_new_alias");

        # Remove the new alias
        $sel->type_ok("nm_read_only_aliases", "potoss_wow");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("The read-only aliases were set.");
        $sel->value_is("nm_read_only_aliases", "potoss_wow");

        # Check that the new alias page is no longer present
        $sel->open_ok("${dir}potoss_new_alias");
        $sel->is_text_present_ok("This page doesn't exist.");

    },
},

{
    name => "tst_create_new_page_from_readonly_alias",
    numtests => 8, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user is on a read-only alias page and clicks on the "create a new
        # page" link.  They shouldn't see an option to create a related
        # page... it should only show the option to create a totally unrelated
        # page.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_wow"); #read only alias for potoss_saved_test
        my_loads_ok();
        $sel->is_text_present_ok("read only");
        $sel->is_text_present_ok("this is change 11");

        $sel->is_text_present_ok("create a new page");
        $sel->click_ok("link=create a new page");
        my_loads_ok();

        ok(! $sel->is_text_present("Show the advanced page creation options"), "Advanced options should not show");

    },
},

{
    name => "tst_recaptcha_failure",
    numtests => 9, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # [tag:spam:gem]
        # A user goes to a page that has reCAPTCHA enabled, hits edit, then
        # tries to submit the page without filling in the right recapatcha
        # values.  A user might try to do this if they're using an automated tool
        # to create spam on the site.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_test_recaptcha");

        $sel->is_text_present_ok("edit this page");
        $sel->click_ok("link=edit this page");
        my_loads_ok();

        $sel->type_ok("myel_text_area", "[potoss_tmp_link_page_2]");
        $sel->type_ok("recaptcha_response_field", "bad1 bad2");
        $sel->click_ok("nm_submit");
        my_loads_ok();

        $sel->is_text_present_ok("The words you typed into the reCAPTCHA field weren't right");

    },
},

{
    name => "tst_create_link_to_readonly_alias",
    numtests => 6, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # [tag:security:gem]
        # A user is being naughty and is trying to link a new page to a
        # read-only alias.  They're being naughty because this isn't exposed
        # anywhere as a link... they're playing with the URL.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}PH_create&nm_relate_to_page=potoss_wow"); #read only alias for potoss_saved_test

        $sel->is_text_present_ok("like the page name");
        $sel->type_ok("nm_page", "potoss_new_naughty_page");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("you cannot relate a new page to a read-only alias page");

    },
},

{
    name => "tst_add_remove_search_box",
    numtests => 25, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user decides to add the search box to the top of the page, then
        # does a quick search, then decides to remove it.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_test_link_tree_a_base");
        $sel->is_text_present_ok("potoss_test_non_existent_page");
        
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=more advanced");
        my_loads_ok();
        $sel->click_ok("link=show the search box");
        my_loads_ok();
        $sel->click_ok("link=go back to the page");
        my_loads_ok();

        # one of the pages which is deeply linked has "which should be" in the text.
        $sel->type_ok("myel_search_query", "which should be");
        $sel->click_ok("nm_submit");
        my_loads_ok();

        $sel->is_text_present_ok("potoss_test_link_tree_a_branch_a");
        $sel->is_text_present_ok("Back to potoss_test_link_tree_a_base");
        $sel->click_ok("link=potoss_test_link_tree_a_base");
        my_loads_ok();

        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=more advanced");
        my_loads_ok();
        $sel->click_ok("link=hide the search box");
        my_loads_ok();
        $sel->click_ok("link=go back to the page");
        my_loads_ok();
    },
},

{
    name => "tst_find_page_successfull",
    numtests => 13, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks for a lost page, and is successful in finding one.
        # Success is finding only one matching page, and being able to click
        # on it, and going to the page.
        #-------------------------------------------------------------------------

        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "Downieville");
        $sel->type_ok("nm_word_1", "Parsin");
        $sel->type_ok("nm_word_2", "mountain");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("single matching page was found");
        $sel->click_ok("link=here");
        my_loads_ok();
        $sel->is_text_present_ok("Downieville is a great place to go mountain biking");

    },
},

{
    name => "tst_find_page_two_pages_match",
    numtests => 10, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks for a lost page, but isn't successful in finding it
        # because there is more than one page which matches, so the results
        # aren't shown.
        #-------------------------------------------------------------------------

        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "potoss");
        $sel->type_ok("nm_word_1", "wikiwikiwiki");
        $sel->type_ok("nm_word_2", "lampstack");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("More than one page matches, so we can't reveal them.");

    },
},

{
    name => "tst_find_page_word_too_short",
    numtests => 10, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks for a lost page, but puts in la for the third word,
        # which is too short.
        #-------------------------------------------------------------------------

        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "potoss");
        $sel->type_ok("nm_word_1", "wikiwikiwiki");
        $sel->type_ok("nm_word_2", "la");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("word 3, la, is too short");

    },
},

{
    name => "tst_find_page_word_in_dictionary",
    numtests => 10, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks for a lost page, but puts in "dream" for the first word.
        # Since it's in the dictionary, it fails.
        #-------------------------------------------------------------------------

        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "dream");
        $sel->type_ok("nm_word_1", "wikiwikiwiki");
        $sel->type_ok("nm_word_2", "lampstack");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("word 1, dream, is in the dictionary");

    },
},

{
    name => "tst_find_page_word_not_alphanumeric",
    numtests => 10, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks for a lost page, but puts in "blah_blah_blah" for the
        # second word.
        # Since it's not an alphanumeric word, it fails.
        #-------------------------------------------------------------------------

        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "potoss");
        $sel->type_ok("nm_word_1", "blah_blah_blah");
        $sel->type_ok("nm_word_2", "lampstack");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("word 2, blah_blah_blah, contains non-alphanumeric characters");

    },
},

{
    name => "tst_find_page_not_successfull_because_hidden",
    numtests => 39, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user doesn't want his page to be able to be found using the
        # 'find your lost page' functionality.  He goes to the page, turns the
        # functionality off, and the page will no longer show up in the lost
        # page results.
        #-------------------------------------------------------------------------

        # Go to the page and hide the page from any find results
        $sel->open_ok("${dir}potoss_test_find_page_1");
        my_loads_ok();
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=more advanced");
        my_loads_ok();
        $sel->click_ok("link=hide the page in the 'find a page' results");
        my_loads_ok();
        
        # Check to see that the page isn't being shown in the results
        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "Downieville");
        $sel->type_ok("nm_word_1", "Parsin");
        $sel->type_ok("nm_word_2", "mountain");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("it can't be shown here");
        
        # To get things back to normal, go back to the page and allow
        # the page to be shown.
        $sel->open_ok("${dir}potoss_test_find_page_1");
        my_loads_ok();
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=more advanced");
        my_loads_ok();
        $sel->click_ok("link=show the page from the 'find a page' results");
        my_loads_ok();
        
        # The page should show up in the results once again.
        $sel->open_ok($dir);
        my_loads_ok();
        $sel->click_ok("link=find a page I previously created");
        my_loads_ok();
        $sel->type_ok("nm_word_0", "Downieville");
        $sel->type_ok("nm_word_1", "Parsin");
        $sel->type_ok("nm_word_2", "mountain");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("single matching page was found");
        $sel->click_ok("link=here");
        my_loads_ok();
        $sel->is_text_present_ok("Downieville is a great place to go mountain biking");

    },
},

{
    name => "tst_try_to_edit_alias",
    numtests => 10, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks at an alias page, then tries to edit the page
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_wow"); #read only alias for potoss_saved_test
        my_loads_ok();
        $sel->is_text_present_ok("read only");
        $sel->is_text_present_ok("this is change 11");

        $sel->open_ok("${dir}PH_edit&nm_page=potoss_wow");
        my_loads_ok();
        $sel->is_text_present_ok("You can't edit this page");

        $sel->open_ok("${dir}PH_page_opts&nm_page=potoss_wow");
        my_loads_ok();
        $sel->is_text_present_ok("You can't view this page's options");
    },
},

{
    name => "tst_iframe_opts_remain",
    numtests => 12, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # This is POT page which has been embedded in an iframe and has nm_no_opts
        # specified to hide the options.  Make sure that the options stay hidden
        # as you click around.
        #-------------------------------------------------------------------------

        $sel->open_ok("/?PH_show_page&nm_page=potoss_test_link_tree_a_base&nm_no_opts=1");
        $sel->is_text_present_ok("potoss_test_existing_but_not_linkable_to_page");
        ok(! $sel->is_text_present("advanced options"), "advanced options not showing");

        $sel->click_ok("link=potoss_test_link_tree_a_branch_a");
        my_loads_ok();
        ok(! $sel->is_text_present("advanced options"), "advanced options not showing - 1");

        $sel->click_ok("myel_edit_link");
        my_loads_ok();
        ok(! $sel->is_text_present("advanced options"), "advanced options not showing - 2");

        $sel->click_ok("//input[\@value='cancel']");
        my_loads_ok();
        ok(! $sel->is_text_present("advanced options"), "advanced options not showing - 3");
    },
},


{
    name => "tst_changes_in_already_existing_page",
    numtests => 15, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks at changes in an already existing page
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_saved_test");
        my_loads_ok();
        $sel->is_text_present_ok("edit this page");
        $sel->is_text_present_ok("this is change 11");

        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=show the page's revision history");
        my_loads_ok();
        $sel->click_ok("link=compare two revisions");
        my_loads_ok();
        $sel->click_ok("link=start at revision 9");
        my_loads_ok();
        $sel->click_ok("link=end at revision 10");
        my_loads_ok();
        $sel->is_text_present_ok("this is change 10");
    },
},


{
    name => "tst_create_new_page",
    numtests => 24, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user looks for a page which doesn't exist, decides to create it and
        # makes a couple of revisions
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_tmp_test");
        my_loads_ok();
        $sel->is_text_present_ok("This page doesn't exist");
        $sel->click_ok("link=create it as a new page");
        my_loads_ok();
        $sel->is_text_present_ok("edit this page");
        $sel->click_ok("link=edit this page");
        my_loads_ok();
        $sel->is_text_present_ok("This message only appears the first time you edit a page");
        $sel->type_ok("nm_text", "This is some text.");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("This is some text");
        $sel->click_ok("link=edit this page");
        my_loads_ok();
        $sel->type_ok("nm_text", "This is some text.\nThis is even more text.");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("This is even more text");
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=show the page's revision history");
        my_loads_ok();
        $sel->is_text_present_ok("view revision 2");

        `cd $texts_dir ; rm -r potoss_tmp_test_REVS ; rm potoss_tmp_test*`;
    },
},


{
    name => "tst_only_one_revision",
    numtests => 17, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # When there is only a single revision, a message appears when you try
        # to look at the revisions.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_tmp_test");
        my_loads_ok();
        $sel->is_text_present_ok("This page doesn't exist");
        $sel->click_ok("link=create it as a new page");
        my_loads_ok();
        $sel->is_text_present_ok("edit this page");
        $sel->click_ok("link=edit this page");
        my_loads_ok();
        $sel->is_text_present_ok("This message only appears the first time you edit a page");
        $sel->type_ok("myel_text_area", "This is some text.");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=show the page's revision history");
        my_loads_ok();
        $sel->is_text_present_ok("There is currently only one revision");

        `cd $texts_dir ; rm -r potoss_tmp_test_REVS ; rm potoss_tmp_test*`;
    },
},

{
    name => "tst_create_page_name_in_dictionary",
    numtests => 6, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # Try to create a page name which is in the dictionary
        #-------------------------------------------------------------------------
        $sel->open_ok("${dir}PH_create");
        $sel->is_text_present_ok("like the page name");
        $sel->type_ok("nm_page", "queen");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("is in the dictionary");
    },
},


{
    name => "tst_create_page_already_exists",
    numtests => 6, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # Try to create a page which already exists
        #-------------------------------------------------------------------------
        $sel->open_ok("${dir}PH_create");
        $sel->is_text_present_ok("like the page name");
        $sel->type_ok("nm_page", "potoss_saved_test");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("that one already exists");
    },
},


{
    name => "tst_create_page_badly_formatted_name",
    numtests => 7, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # Try to create a page with a badly formatted name.  It will automatically
        # suggest a better one.
        #-------------------------------------------------------------------------
        $sel->open_ok("${dir}PH_create");
        $sel->is_text_present_ok("like the page name");
        $sel->type_ok("nm_page", "My dog is always hungry!");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("changed the page name to");
        $sel->is_text_present_ok("my_dog_is_always_hungry");
    },
},

{
    name => "tst_encrypt_decrypt_page_content",
    numtests => 54, solo => 0, should_run => 1, is_last_test => 0, is_slow => 1, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user wants to encrypt and decrypt their page content.
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_test_encryption_a");
        $sel->is_text_present_ok("Here is some unencrypted content.");
        $sel->is_text_present_ok("Less than < and greater than > and ampersand & and question mark ?");
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=very advanced");
        my_loads_ok();
        $sel->click_ok("link=show the encryption buttons");
        my_loads_ok();
        $sel->click_ok("link=go back to the page");
        my_loads_ok();
        $sel->is_text_present_ok("Here is some unencrypted content.");
        $sel->click_ok("myel_edit_link");
        my_loads_ok();
        ok($sel->get_value("myel_text_area") =~ /^Here is some unencrypted content/);
        ok($sel->get_value("myel_text_area") =~ /Less than < and greater than > and ampersand & and question mark \?/);
        $sel->type_ok("myel_blowfish_key", "asimplekey");
        $sel->click_ok("link=encrypt");
        ok($sel->get_value("myel_text_area") =~ /^4BE6B52958CAF3FA48780A3D72959F9DC87/);
        $sel->click_ok("link=decrypt");
        ok($sel->get_value("myel_text_area") =~ /^Here is some unencrypted content/);
        ok($sel->get_value("myel_text_area") =~ /Less than < and greater than > and ampersand & and question mark \?/);

        # now, instead of clicking the "encrypt" and "decrypt" buttons,
        # just hit enter while in the myel_blowfish_key input
        $sel->key_down_ok("myel_blowfish_key", "\\13");
        ok($sel->get_value("myel_text_area") =~ /^4BE6B52958CAF3FA48780A3D72959F9DC87/);
        $sel->key_down_ok("myel_blowfish_key", "\\13");
        ok($sel->get_value("myel_text_area") =~ /^Here is some unencrypted content/);
        ok($sel->get_value("myel_text_area") =~ /Less than < and greater than > and ampersand & and question mark \?/);

        # The text is not encrypted, so when you click on the submit button
        # A confirmation should pop up asking if you're sure you want to save.
        $sel->choose_cancel_on_next_confirmation_ok();
        $sel->click_ok("nm_submit");
        
        WAIT: {
            for (1..10) {
                if (eval { $sel->is_confirmation_present() }) { pass("confirmation is present"); last WAIT }
                sleep(1);
            }
            fail("timeout waiting for confirmation to be present");
        }
        ok($sel->get_confirmation() =~ /^The text appears to not be encrypted\.  Are you sure you want to save/);
        
        # Encrypt it and save it so we can try decrypting it from the "view".
        $sel->key_down_ok("myel_blowfish_key", "\\13");
        ok($sel->get_value("myel_text_area") =~ /^4BE6B52958CAF3FA48780A3D72959F9DC87/);
        $sel->click_ok("nm_submit");

        # In the view, try decrypting by typing in the key and Enter
        my_wait_until_text_present_ok("advanced options", 1);
        $sel->is_text_present_ok("4BE6B52958CAF3FA48780A3D72959F9DC87");
        $sel->type_ok("myel_blowfish_key", "asimplekey");
        $sel->key_down_ok("myel_blowfish_key", "\\13");
        $sel->is_text_present_ok("Here is some unencrypted content");
        $sel->click_ok("myel_edit_link");
        my_loads_ok();

        # Back in the edit mode, decrypt the text and save it, which requires
        # agreeing to a confirmation (since it doesn't really want to save
        # unencrypted text.
        $sel->type_ok("myel_blowfish_key", "asimplekey");
        $sel->key_down_ok("myel_blowfish_key", "\\13");
        ok($sel->get_value("myel_text_area") =~ /^Here is some unencrypted content/);
        $sel->click_ok("nm_submit");
        WAIT: {
            for (1..10) {
                if (eval { $sel->is_confirmation_present() }) { pass("confirmation is present"); last WAIT }
                sleep(1);
            }
            fail("timeout waiting for confirmation to be present");
        }
        ok($sel->get_confirmation() =~ /^The text appears to not be encrypted\.  Are you sure you want to save/);

        # Go back to the main page and remove the encryption buttons from the
        # page.
        my_wait_until_text_present_ok("advanced options", 1);
        $sel->click_ok("link=advanced options");
        my_loads_ok();
        $sel->click_ok("link=very advanced");
        my_loads_ok();
        $sel->click_ok("link=hide the encryption buttons");
        my_loads_ok();
    },
},

{
    name => "tst_edit_non_head_revision",
    numtests => 16, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user decides to edit starting at a non-HEAD revision.
        # There should be alerts about this, but they should be able to get to
        # the right place to edit, and if they cancel their edit, it should take
        # them back to the page on the right revision.
        #-------------------------------------------------------------------------

        $sel->open_ok("/?PH_edit&nm_page=potoss_saved_test&nm_rev=9");
        $sel->is_text_present_ok("You are not editing the latest revision");
        $sel->click_ok("link=Edit the latest revision");
        my_loads_ok();
        $sel->click_ok("//input[\@value='cancel']");
        my_loads_ok();
        $sel->is_text_present_ok("edit this page");

        $sel->click_ok("myel_edit_link");
        my_loads_ok();
        $sel->click_ok("//input[\@value='cancel']");
        my_loads_ok();
        $sel->is_text_present_ok("edit this page");

        $sel->open_ok("/?PH_edit&nm_page=potoss_saved_test&nm_rev=9");
        $sel->click_ok("//input[\@value='cancel']");
        my_loads_ok();
        $sel->is_text_present_ok("You are looking at revision 9");
    },
},

{
    name => "tst_create_two_way_linked_page_link_auto_created",
    numtests => 23, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user is on a page, clicks the "create a new page" link, then makes a
        # linked page.  The link to [potoss_tmp_link_page_2] **DOES NOT** already
        # exist on the first page, so it's automatically created.  See similar
        # story below...
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_tmp_link_page_1");
        my_loads_ok();
        $sel->is_text_present_ok("This page doesn't exist");
        $sel->click_ok("link=create it as a new page");
        my_loads_ok();
        $sel->is_text_present_ok("create a new page");
        $sel->click_ok("link=create a new page");
        my_loads_ok();
        $sel->is_text_present_ok("Show the advanced page creation options");
        $sel->click_ok("link=Show the advanced page creation options");
        my_loads_ok();
        $sel->is_text_present_ok("A related page - two way linking");
        $sel->click_ok("link=don't add searchboxes");
        my_loads_ok();
        $sel->type_ok("nm_page", "potoss_tmp_link_page_2");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("back to potoss_tmp_link_page_1");
        $sel->click_ok("link=potoss_tmp_link_page_1");
        my_loads_ok();
        $sel->is_text_present_ok("link to potoss_tmp_link_page_2");
        $sel->click_ok("link=potoss_tmp_link_page_2");
        my_loads_ok();
    },
},

{
    name => "tst_create_two_way_linked_page_link_not_auto_created",
    numtests => 31, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user is on a page, clicks the "create a new page" link, then makes a
        # linked page.  The link to [potoss_tmp_link_page_2] **DOES** already
        # exist on the first page, so a new one is not automatically created.
        # See similar story above...
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_tmp_link_page_1");
        my_loads_ok();
        $sel->is_text_present_ok("This page doesn't exist");
        $sel->click_ok("link=create it as a new page");
        my_loads_ok();

        # unlike the story above, add the link to the text.
        {
            $sel->is_text_present_ok("edit this page");
            $sel->click_ok("link=edit this page");
            my_loads_ok();
            $sel->is_text_present_ok("This message only appears the first time you edit a page");
            $sel->type_ok("myel_text_area", "[potoss_tmp_link_page_2]");
            $sel->click_ok("nm_submit");
            my_loads_ok();
        }

        $sel->is_text_present_ok("create a new page");
        $sel->click_ok("link=create a new page");
        my_loads_ok();
        $sel->is_text_present_ok("Show the advanced page creation options");
        $sel->click_ok("link=Show the advanced page creation options");
        my_loads_ok();
        $sel->is_text_present_ok("A related page - two way linking");
        $sel->click_ok("link=don't add searchboxes");
        my_loads_ok();
        $sel->type_ok("nm_page", "potoss_tmp_link_page_2");
        $sel->click_ok("nm_submit");
        my_loads_ok();
        $sel->is_text_present_ok("back to potoss_tmp_link_page_1");
        $sel->click_ok("link=potoss_tmp_link_page_1");
        my_loads_ok();

        # unlike the story above
        {
            ok( ! $sel->is_text_present("link to potoss_tmp_link_page_2"),
                "the automatically created text was not added because the link already existed");
        }

        $sel->is_text_present_ok("potoss_tmp_link_page_2");
        $sel->click_ok("link=potoss_tmp_link_page_2");
        my_loads_ok();
    },
},

{
    name => "tst_create_one_way_linked_page_link_auto_created",
    numtests => 23, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user is on a page, clicks the "create a new page" link, then makes a
        # one-way linked page.  The link to [potoss_tmp_link_page_2] **DOES NOT**
        # already exist on the first page, so it's automatically created.
        # See similar story below...
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_tmp_link_page_1");
        my_loads_ok();
        $sel->is_text_present_ok("This page doesn't exist");
        $sel->click_ok("link=create it as a new page");
        my_loads_ok();
        $sel->is_text_present_ok("create a new page");
        $sel->click_ok("link=create a new page");
        my_loads_ok();
        $sel->is_text_present_ok("Show the advanced page creation options");
        $sel->click_ok("link=Show the advanced page creation options");
        my_loads_ok();
        $sel->is_text_present_ok("A related page - one way linking only");
        $sel->click_ok("link=don't add searchbox");
        my_loads_ok();
        $sel->type_ok("nm_page", "potoss_tmp_link_page_2");
        $sel->click_ok("nm_submit");
        my_loads_ok();

        # Note: no link back to the pre-exsiting page, since it's a one-way link.
        $sel->is_text_present_ok("Nothing is in the page yet");

        $sel->open_ok("${dir}potoss_tmp_link_page_1");
        my_loads_ok();
        $sel->is_text_present_ok("link to potoss_tmp_link_page_2");
        $sel->click_ok("link=potoss_tmp_link_page_2");
        my_loads_ok();
    },
},

{
    name => "tst_create_one_way_linked_page_link_not_auto_created",
    numtests => 31, solo => 0, should_run => 1, is_last_test => 0, is_slow => 0, force_include_when_skipping => 0,
    code => sub {
        #-------------------------------------------------------------------------
        # Story:
        # A user is on a page, clicks the "create a new page" link, then makes a
        # linked page.  The link to [potoss_tmp_link_page_2] **DOES** already
        # exist on the first page, so a new one is not automatically created.
        # See similar story above...
        #-------------------------------------------------------------------------

        $sel->open_ok("${dir}potoss_tmp_link_page_1");
        my_loads_ok();
        $sel->is_text_present_ok("This page doesn't exist");
        $sel->click_ok("link=create it as a new page");
        my_loads_ok();

        # unlike the story above, add the link to the text.
        {
            $sel->is_text_present_ok("edit this page");
            $sel->click_ok("link=edit this page");
            my_loads_ok();
            $sel->is_text_present_ok("This message only appears the first time you edit a page");
            $sel->type_ok("myel_text_area", "[potoss_tmp_link_page_2]");
            $sel->click_ok("nm_submit");
            my_loads_ok();
        }

        $sel->is_text_present_ok("create a new page");
        $sel->click_ok("link=create a new page");
        my_loads_ok();
        $sel->is_text_present_ok("Show the advanced page creation options");
        $sel->click_ok("link=Show the advanced page creation options");
        my_loads_ok();
        $sel->is_text_present_ok("A related page - one way linking only");
        $sel->click_ok("link=don't add searchbox");
        my_loads_ok();
        $sel->type_ok("nm_page", "potoss_tmp_link_page_2");
        $sel->click_ok("nm_submit");
        my_loads_ok();

        # Note: no link back to the pre-exsiting page, since it's a one-way link.
        $sel->is_text_present_ok("Nothing is in the page yet");

        $sel->open_ok("${dir}potoss_tmp_link_page_1");
        my_loads_ok();

        # unlike the story above
        {
            ok( ! $sel->is_text_present("link to potoss_tmp_link_page_2"),
                "the automatically created text was not added because the link already existed");
        }

        $sel->is_text_present_ok("potoss_tmp_link_page_2");
        $sel->click_ok("link=potoss_tmp_link_page_2");
        my_loads_ok();
    },
},
)  #end of tests array
}  #end of get_tests subroutine

sub my_loads_ok {
    # this is called so often that I made it a subroutine
    # with a cleaner name and a variable you can change in one place.

    # gemnote even with this set to a short interval, selenium still "sticks"
    # on some pages for a _long_ time.
    my $length_in_milliseconds = 50_000;
    $sel->wait_for_page_to_load_ok("$length_in_milliseconds", "page loads in less than $length_in_milliseconds");
}

sub my_wait_until_text_present_ok {
    my $text = shift;
    my $num_seconds = shift
        || die "need the number of seconds to wait";
    my $message = shift;
    
    for my $try_num (0..$num_seconds) {

        if ($sel->is_text_present($text)) {
            ok(1, $message);
            return 1;
        }

        if ($try_num > $num_seconds) {
            ok(0, $message);
            return 0;
        }

        sleep(1);
    }
}
